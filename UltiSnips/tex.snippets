global !p
def math():
  return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

# environments
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet
snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet js "lstlisting javascript" bA
\begin{lstlisting}[language=JavaScript]
$0
\end{lstlisting}
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# common shorthand 

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet te "text" wA
\text{$1} $0
endsnippet

context "math()"
snippet bb "mathbb" wA
\mathbb{$1}$0
endsnippet

snippet bf "textbf" wA
\textbf{$1}$0
endsnippet

snippet bs "boldsymbol" wA
\boldsymbol{$1}$0
endsnippet

context "math()"
snippet => "Implies" iA
\implies 
endsnippet

context "math()"
snippet cc "subseteq" wA
\subseteq  
endsnippet

context "math()"
snippet lim "limit" wA
\lim\limits_{$1 \to $2} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet fx "f(x)" wA
f(x)
endsnippet

context "math()"
snippet gx "g(x)" wA
g(x)
endsnippet

context "math()"
snippet hx "h(x)" wA
h(x)
endsnippet

context "math()"
snippet sq "square root" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet norm "norm" iA
\norm{$1} $0
endsnippet

# specific

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet sum "summation" wA
\sum_{${1:n=1}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

# fractions
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet part "d/dx" wA
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# matrices
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet
